{"version":3,"sources":["AddForm.tsx","EditForm.tsx","Table.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddUserForm","addUser","useState","user","setUser","onSubmit","event","preventDefault","name","id","type","value","onChange","target","EditUserForm","editing","setEditing","currentUser","updateUser","useEffect","onClick","UserTable","users","editRow","deleteUser","length","map","key","colSpan","App","setUsers","setCurrentUser","randomUserName","setRandomUserName","prevRandomUserName","setPrevRandomUserName","computeRandomUserName","Math","random","updatedUser","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.426c063c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport User from \"./User\";\n\ntype Props = {\n  addUser: (user: User) => void;\n};\n\nconst AddUserForm = ({ addUser }: Props) => {\n  const [user, setUser] = useState();\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setUser({ ...user, [name]: value });\n  };\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault();\n        if (!user?.name) return;\n\n        addUser(user);\n        setUser({ id: null, name: \"\" });\n      }}\n    >\n      <label>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={user?.name}\n        onChange={handleInputChange}\n      />\n      <button>Add new user</button>\n    </form>\n  );\n};\n\nexport default AddUserForm;\n","import React, { useState, useEffect } from \"react\";\nimport User from \"./User\";\n\ntype Props = {\n  editing: boolean;\n  setEditing: (editing: boolean) => void;\n  currentUser: User;\n  updateUser: (id: number, user: User) => void;\n};\n\nconst EditUserForm = ({\n  editing,\n  setEditing,\n  currentUser,\n  updateUser\n}: Props) => {\n  const [user, setUser] = useState(currentUser);\n\n  useEffect(() => {\n    setUser(currentUser);\n  }, [editing, setEditing, currentUser, updateUser]);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setUser({ ...user, [name]: value });\n  };\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault();\n\n        updateUser(user.id, user);\n      }}\n    >\n      <label>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={user.name}\n        onChange={handleInputChange}\n      />\n      <button>Update user</button>\n      <button onClick={() => setEditing(false)}>Cancel</button>\n    </form>\n  );\n};\n\nexport default EditUserForm;\n","import * as React from \"react\";\nimport User from \"./User\";\n\ntype Props = {\n  users: User[];\n  editRow: (user: User) => void;\n  deleteUser: (id: number) => void;\n};\n\nconst UserTable = ({ users, editRow, deleteUser }: Props) => (\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {users.length > 0 ? (\n        users.map(user => (\n          <tr key={user.id}>\n            <td>{user.name}</td>\n            <td>\n              <button\n                onClick={() => {\n                  editRow(user);\n                }}\n              >\n                Edit\n              </button>\n              <button onClick={() => deleteUser(user.id)}>Delete</button>\n            </td>\n          </tr>\n        ))\n      ) : (\n        <tr>\n          <td colSpan={3}>No users</td>\n        </tr>\n      )}\n    </tbody>\n  </table>\n);\n\nexport default UserTable;\n","import React, { useState } from \"react\";\nimport AddUserForm from \"./AddForm\";\nimport EditUserForm from \"./EditForm\";\nimport UserTable from \"./Table\";\nimport User from \"./User\";\n\nconst App = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [currentUser, setCurrentUser] = useState();\n  const [editing, setEditing] = useState(false);\n  const [randomUserName, setRandomUserName] = useState();\n  const [prevRandomUserName, setPrevRandomUserName] = useState();\n\n  const addUser = (user: User) => {\n    user.id = users.length + 1;\n    setUsers([...users, user]);\n  };\n\n  const deleteUser = (id: number) => {\n    setEditing(false);\n\n    setUsers(users.filter(user => user.id !== id));\n  };\n\n  const updateUser = (id: number, updatedUser: User) => {\n    setEditing(false);\n\n    setUsers(users.map(user => (user.id === id ? updatedUser : user)));\n  };\n\n  const editRow = (user: User) => {\n    setEditing(true);\n\n    setCurrentUser({ id: user.id, name: user.name });\n  };\n\n  const computeRandomUserName = (users: User[]) => {\n    const randomUserName = users[(users.length * Math.random()) | 0]?.name;\n    if (prevRandomUserName !== randomUserName) {\n      setRandomUserName(randomUserName);\n      setPrevRandomUserName(randomUserName);\n    } else if (users.length > 1) {\n      computeRandomUserName(users);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={() => computeRandomUserName(users)}>\n        DISPLAY RANDOM USER\n      </button>\n      <h1>{randomUserName && randomUserName}</h1>\n      <div>\n        {editing ? (\n          <>\n            <h2>Edit user</h2>\n            <EditUserForm\n              editing={editing}\n              setEditing={setEditing}\n              currentUser={currentUser}\n              updateUser={updateUser}\n            />\n          </>\n        ) : (\n          <>\n            <h2>Add user</h2>\n            <AddUserForm addUser={addUser} />\n          </>\n        )}\n      </div>\n      <div>\n        <h2>View users</h2>\n        <UserTable users={users} editRow={editRow} deleteUser={deleteUser} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}